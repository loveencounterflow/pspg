{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,UAAA,EAAA,SAAA,EAAA,YAAA,EAAA,qBAAA,EAAA,GAAA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA,EAAA,QAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZ5B;;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,CAAA,CAAE,CAAF,EACE,MADF,EAEE,MAFF,CAAA,GAE4B,EAF5B;;EAGA,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,EAGE,OAHF,EAIE,OAJF,CAAA,GAI4B,KAJ5B,EArBA;;;EA2BA,OAAA,CAA0B,qBAA1B;;EACA,UAAA,GAA4B,QAAA,CAAA,GAAE,CAAF,CAAA;WAAY,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,GAAA,CAAV,CAAb;EAAZ;;EAC5B,OAAA,GAA4B,QAAA,CAAA,GAAE,CAAF,CAAA;WAAY,UAAA,CAAW,SAAX,EAAsB,GAAA,CAAtB;EAAZ;;EAC5B,CAAA,CAAE,QAAF,EAAY,QAAZ,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B;;EACA,qBAAA,GAA4B,OAAA,CAAQ,uBAAR;;EAC5B,SAAA,GAA4B,OAAA,CAAQ,eAAR;;EAC5B,YAAA,GAA4B,OAAA,CAAQ,SAAR,EAjC5B;;;EAoCA,IAAC,CAAA,eAAD,GAAmB,SAAA,CAAE,IAAF,EAAQ,IAAR,EAAc,MAAd,CAAA;AACjB,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;IAAA,MAAM,GAAA,GAAM,CAAG;;AAAkC;MAAA,KAAA,sCAAA;;qBAA9B,QAAA,CAAS,GAAT,EAAc,MAAQ,CAAA,GAAA,CAAtB;MAA8B,CAAA;;QAAlC,CAAmD,CAAC,IAApD,CAAyD,KAAzD,CAAH,CAAN,GAA4E;IAClF,MAAM,GAAA,GAAM,CAAG;;AAAmD;MAAA,KAAA,sCAAA;;qBAA/C,QAAA,CAAS,EAAT,EAAa,MAAQ,CAAA,GAAA,CAArB,EAA4B;UAAE,MAAA,EAAQ;QAAV,CAA5B;MAA+C,CAAA;;QAAnD,CAAoE,CAAC,IAArE,CAA0E,KAA1E,CAAH,CAAN,GAA6F;IACnG,KAAA,sCAAA;;MACE,MAAM,GAAA,GAAM,CAAG;;AAAyC;QAAA,KAAA,wCAAA;;uBAArC,QAAA,CAAS,GAAK,CAAA,GAAA,CAAd,EAAqB,MAAQ,CAAA,GAAA,CAA7B;QAAqC,CAAA;;UAAzC,CAA0D,CAAC,IAA3D,CAAgE,KAAhE,CAAH,CAAN,GAAmF;IAD3F;IAEA,MAAM,CAAA,CAAA,CAAA,CAAI,IAAI,CAAC,MAAT,CAAgB,MAAhB;IACN,MAAM;AACN,WAAO;EAPU,EApCnB;;;EA8CA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAA,CAAA;AACd,QAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAA,IAAA,GAAY,MAAA,CAAO,MAAP;IACZ,SAAA,GAAY;IACZ,MAAA,GAAY,CAAA;IACZ,IAAA,GAAY,KAHZ;;AAKA,WAAO,EAAE,CAAC,CAAH,CAAK,CAAE,IAAF,CAAL,EAAgB,CAAE,GAAF,EAAO,IAAP,CAAA,GAAA;AACrB,UAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA;MAAA,IAAG,GAAA,KAAO,IAAV;AAEY;QAAA,KAAA,WAAA,GAAA;;UAAV,IAAA,CAAK,IAAL;QAAU,CAFZ;OAAA,MAAA;;UAIE;;AAAc;YAAA,KAAA,UAAA;2BAAJ;YAAI,CAAA;;;;QACd,CAAA,GAAQ,CAAA;QACR,KAAA,UAAA;UACE,CAAG,CAAA,GAAA,CAAH,GAAgB,KAAA,kFAAiC;UACjD,KAAA,GAAgB,QAAA,CAAS,KAAT;UAChB,MAAQ,CAAA,GAAA,CAAR,GAAgB,IAAI,CAAC,GAAL,CAAS,CAAT,wCAA8B,CAA9B,EAAmC,KAAnC;QAHlB;QAIA,SAAS,CAAC,IAAV,CAAe,CAAf,EAVF;;AAWA,aAAO;IAZc,CAAhB;EANO,EA9ChB;;;EAmEA,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAA,CAAA;AAEf,QAAA,QAAA;;IAAA,QAAA,GAAW;IACX,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,YAAD,CAAA,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,YAAD,CAAA,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAA,CAAd,EAHA;;AAKA,WAAO,EAAE,CAAC,IAAH,CAAQ,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR,CAAR;EAPQ,EAnEjB;;;EA6EA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAE,WAAW,IAAb,CAAA;AACd,QAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA;IAAA,QAAA,GACE;MAAA,KAAA,EAAQ,YAAR;MACA,IAAA,EAAQ,CAAG,MAAH,EAAW,mBAAX;IADR,EADF;;IAIA,QAAA,GAAiB,gBAAH,GAAkB,MAAA,CAAO,CAAA,CAAP,EAAW,QAAX,EAAqB,QAArB,CAAlB,GAAqD;IACnE,MAAA,GAAc,EAAE,CAAC,eAAH,CAAA;IACd,MAAA,GAAc,qBAAqB,CAAC,MAAtB,CAA6B,EAAE,CAAC,IAAH,CAAQ,MAAR,CAA7B;IACd,MAAM,CAAC,IAAP,CAAY,SAAA,CAAU,QAAV,EAAoB,QAAA,CAAA,CAAA;aAAG,IAAA,CAAK,IAAL;IAAH,CAApB,CAAZ;IACA,IAAA,GAAc,MAAA,CAAO,MAAP,EARd;;AAUA,WAAO,EAAE,CAAC,MAAH,CAAU,CAAE,IAAF,CAAV,EAAqB,QAAA,CAAE,IAAF,CAAA;MAC1B,IAAuB,IAAA,KAAQ,IAA/B;AAAA,eAAO,MAAM,CAAC,GAAP,CAAA,EAAP;;MACA,IAAkB,YAAlB;QAAA,IAAA,GAAQ,GAAR;;MACA,IAAA,CAA+B,GAAG,CAAC,IAAJ,CAAS,IAAT,CAA/B;QAAA,IAAA,GAAQ,IAAI,CAAC,QAAL,CAAA,EAAR;;MACA,IAAA,CAA+B,GAAG,CAAC,IAAJ,CAAS,IAAT,CAA/B;QAAA,IAAA,IAAQ,KAAR;;MACA,MAAM,CAAC,IAAP,CAAY,IAAZ;AACA,aAAO;IANmB,CAArB;EAXO;AA7EhB",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PSPG/EXPERIMENTS/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# FS                        = require 'fs'\nPATH                      = require 'path'\nPS                        = require 'pipestreams'\n{ $\n  $async\n  select }                = PS\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\nrequire                   './exception-handler'\njoin_paths                = ( P... ) -> PATH.resolve PATH.join P...\nabspath                   = ( P... ) -> join_paths __dirname, P...\n{ to_width, width_of, }   = require 'to-width'\npull_stream_to_stream     = require 'pull-stream-to-stream'\nnew_pager                 = require 'default-pager'\npath_to_pspg              = abspath '../pspg'\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_table_rows = ( rows, keys, widths ) ->\n  yield ' ' + (  ( ( to_width key, widths[ key ] ) for key in keys ).join ' | ' ) + ' '\n  yield '-' + (  ( ( to_width '', widths[ key ], { padder: '-', } ) for key in keys ).join '-+-' ) + '-'\n  for row in rows\n    yield ' ' + (  ( ( to_width row[ key ], widths[ key ] ) for key in keys ).join ' | ' ) + ' '\n  yield \"(#{rows.length} rows)\"\n  yield '\\n\\n'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_etc = ->\n  last      = Symbol 'last'\n  collector = []\n  widths    = {}\n  keys      = null\n  #.........................................................................................................\n  return PS.$ { last, }, ( row, send ) =>\n    if row is last\n      # console.table collector\n      send line for line from @walk_table_rows collector, keys, widths\n    else\n      keys ?= ( key for key of row )\n      d     = {}\n      for key of row\n        d[ key ]      = value = row[ key ]?.toString() ? ''\n        width         = width_of value\n        widths[ key ] = Math.max 2, ( widths[ key ] ? 2 ), width\n      collector.push d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee_as_table = ->\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push @$collect_etc()\n  pipeline.push @$page_output()\n  pipeline.push PS.$drain()\n  #.........................................................................................................\n  return PS.$tee PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$page_output = ( settings = null ) ->\n  defaults    =\n    pager:  path_to_pspg\n    args:   [  '-s17', '--force-uniborder', ]\n  #.........................................................................................................\n  settings    = if settings? then assign {}, defaults, settings else defaults\n  source      = PS.new_push_source()\n  stream      = pull_stream_to_stream.source PS.pull source\n  stream.pipe new_pager settings, -> urge 'ok'\n  last        = Symbol 'last'\n  #.........................................................................................................\n  return PS.$watch { last, }, ( line ) ->\n    return source.end() if line is last\n    line  = '' unless line?\n    line  = line.toString() unless isa.text line\n    line += '\\n'            unless isa.line line\n    source.send line\n    return null\n\n"
  ]
}