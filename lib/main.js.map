{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PSPG/EXPERIMENTS/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# FS                        = require 'fs'\nPATH                      = require 'path'\nPS                        = require 'pipestreams'\n{ $\n  $async\n  select }                = PS\n# types                     = require '../types'\n# { isa\n#   validate\n#   declare\n#   size_of\n#   type_of }               = types\n# #...........................................................................................................\n# require                   '../exception-handler'\n#...........................................................................................................\njoin_paths                = ( P... ) -> PATH.resolve PATH.join P...\nabspath                   = ( P... ) -> join_paths __dirname, P...\n{ to_width, width_of, }   = require 'to-width'\n\npull_stream_to_stream     = require 'pull-stream-to-stream'\n_new_pager                 = require 'default-pager'\n\npager_settings  =\n  pager:  abspath '../../pspg'\n  args:   [  '-s17', '--force-uniborder', ]\n\n#-----------------------------------------------------------------------------------------------------------\n@print_table = ( rows, keys, widths ) =>\n  ### headings ###\n  echo ' ' + (  ( ( to_width key, widths[ key ] ) for key in keys ).join ' | ' ) + ' '\n  ### divider ###\n  echo '-' + (  ( ( to_width '', widths[ key ], { padder: '-', } ) for key in keys ).join '-+-' ) + '-'\n  ### data ###\n  for row in rows\n    echo ' ' + (  ( ( to_width row[ key ], widths[ key ] ) for key in keys ).join ' | ' ) + ' '\n  echo \"(#{rows.length} rows)\"\n  echo '\\n\\n'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee_as_table = =>\n  last                    = Symbol 'last'\n  collector               = []\n  widths                  = {}\n  keys                    = null\n  #.........................................................................................................\n  collect_etc = PS.$watch { last, }, ( row ) =>\n    if row is last\n      # console.table collector\n      @print_table collector, keys, widths\n    else\n      keys ?= ( key for key of row )\n      collector.push row\n      for key of row\n        width         = width_of row[ key ]\n        widths[ key ] = Math.max ( widths[ key ] ? 0 ), width\n    return null\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push collect_etc\n  pipeline.push PS.$drain()\n  #.........................................................................................................\n  return PS.$tee PS.pull pipeline...\n\n\n@new_pager ->\n\n  # stream    = FS.createReadStream PATH.join __dirname, '../../README.md'\n\n  pipeline  = []\n  source    = PS.new_push_source()\n  pipeline.push source\n  stream    = pull_stream_to_stream.source PS.pull pipeline...\n  stream.pipe _new_pager pager_settings, -> urge 'ok'\n\n  output = ( t ) -> source.send t + '\\n'\n  end_output = -> source.end()\n\n"
  ]
}