{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PSPG/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# FS                        = require 'fs'\nPATH                      = require 'path'\nSP                        = require 'steampipes'\n{ $\n  $async\n  select }                = SP.export()\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\nrequire                   './exception-handler'\njoin_paths                = ( P... ) -> PATH.resolve PATH.join P...\nabspath                   = ( P... ) -> join_paths __dirname, P...\n{ to_width, width_of, }   = require 'to-width'\nnew_pager                 = require 'default-pager'\n# path_to_pspg              = abspath '../pspg'\npath_to_pspg              = 'pspg'\n{ jr, }                   = CND\nassign                    = Object.assign\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_table_header = ( keys, widths ) ->\n  yield ' ' + (  ( ( to_width key, widths[ key ] ) for key from keys.values() ).join ' | ' ) + ' '\n  yield '-' + (  ( ( to_width '', widths[ key ], { padder: '-', } ) for key from keys.values() ).join '-+-' ) + '-'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_formatted_table_row = ( row, keys, widths ) ->\n  yield ' ' + (  ( ( to_width ( row[ key ] ? '' ), widths[ key ] ) for key from keys.values() ).join ' | ' ) + ' '\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_table_footer = ( count ) ->\n  yield \"(#{count} rows)\"\n  yield '\\n\\n'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@to_text = ( value ) ->\n  return switch type = type_of value\n    when 'text'       then R = jr value; R = R[ 1 ... R.length - 1 ]; R.replace /\\\\\"/g, '\"'\n    when 'buffer'     then value.toString 'hex'\n    when 'number'     then \"#{value}\"\n    when 'null'       then '∎'\n    when 'undefined'  then '?'\n    else value?.toString() ? ''\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_etc = ( limit = 1000 ) ->\n  validate.positive limit\n  last        = Symbol 'last'\n  cache       = []\n  widths      = {}\n  keys        = new Set()\n  key_widths  = {}\n  count       = 0\n  send        = null\n  #.........................................................................................................\n  flush = =>\n    return null unless cache?\n    send line for line from @walk_table_header keys, widths\n    for cached_row in cache\n      send line for line from @walk_formatted_table_row cached_row, keys, widths\n    cache = null\n  #.........................................................................................................\n  return SP.$ { last, }, ( row, send_ ) =>\n    send = send_\n    #.......................................................................................................\n    if row is last\n      flush()\n      send line for line from @walk_table_footer count\n      return null\n    #.......................................................................................................\n    count++\n    #.......................................................................................................\n    if count > limit\n      flush()\n      row[ key ] = @to_text row[ key ] for key from keys.values()\n      send line for line from @walk_formatted_table_row row, keys, widths\n      return null\n    #.......................................................................................................\n    d = {}\n    for key of row\n      keys.add key\n      d[ key ]      = value = @to_text row[ key ]\n      key_width     = ( key_widths[ key ] ?= width_of key )\n      widths[ key ] = Math.max 2, ( widths[ key ] ? 2 ), ( width_of value ), key_width\n    cache.push d\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee_as_table = ( settings, handler ) ->\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push @$collect_etc()\n  pipeline.push @$page_output arguments...\n  pipeline.push SP.$drain()\n  #.........................................................................................................\n  return SP.$tee SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$page_output = ( settings, handler ) ->\n  switch arity = arguments.length\n    when 0 then null\n    when 1\n      if isa.function settings\n        [ settings, handler, ] = [ null, settings, ]\n    when 2 then null\n    else throw new Error \"µ33981 expected between 0 and 2 arguments, got #{arity}\"\n  validate.function handler   if handler?\n  validate.object   settings  if settings?\n  #.........................................................................................................\n  defaults    =\n    pager:  path_to_pspg\n    args:   [  '-s17', '--force-uniborder', ]\n  #.........................................................................................................\n  settings    = if settings? then assign {}, defaults, settings else defaults\n  if settings.csv ### ??? ###\n    settings.args = [ settings.args..., '--csv', '--csv-border', '2', '--csv-double-header', ]\n  #.........................................................................................................\n  source      = SP.new_push_source()\n  stream      = process.stdout # SP.node_stream_from_source SP.pull source, SP.$watch ( d ) -> info '^33344^', d\n  stream.pipe new_pager settings, handler\n  last        = Symbol 'last'\n  #.........................................................................................................\n  return SP.$watch { last, }, ( line ) ->\n    return source.end() if line is last\n    line  = '' unless line?\n    line  = line.toString() unless isa.text line\n    line += '\\n'            unless isa.line line\n    # source.send line\n    source.write line\n    return null\n\n"
  ]
}