{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PSPG/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# FS                        = require 'fs'\nPATH                      = require 'path'\nPS                        = require 'pipestreams'\n{ $\n  $async\n  select }                = PS\ntypes                     = require './types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\nrequire                   './exception-handler'\njoin_paths                = ( P... ) -> PATH.resolve PATH.join P...\nabspath                   = ( P... ) -> join_paths __dirname, P...\n{ to_width, width_of, }   = require 'to-width'\nnew_pager                 = require 'default-pager'\npath_to_pspg              = abspath '../pspg'\n{ jr, }                   = CND\n\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_table_header = ( keys, widths ) ->\n  yield ' ' + (  ( ( to_width key, widths[ key ] ) for key from keys.values() ).join ' | ' ) + ' '\n  yield '-' + (  ( ( to_width '', widths[ key ], { padder: '-', } ) for key from keys.values() ).join '-+-' ) + '-'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_formatted_table_row = ( row, keys, widths ) ->\n  yield ' ' + (  ( ( to_width ( row[ key ] ? '' ), widths[ key ] ) for key from keys.values() ).join ' | ' ) + ' '\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_table_footer = ( count ) ->\n  yield \"(#{count} rows)\"\n  yield '\\n\\n'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@to_text = ( value ) ->\n  return switch type = type_of value\n    when 'text'       then R = jr value; R = R[ 1 ... R.length - 1 ]; R.replace /\\\\\"/g, '\"'\n    when 'buffer'     then value.toString 'hex'\n    when 'number'     then \"#{value}\"\n    when 'null'       then 'âˆŽ'\n    when 'undefined'  then '?'\n    else value?.toString() ? ''\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_etc = ( limit = 1000 ) ->\n  validate.positive limit\n  last        = Symbol 'last'\n  cache       = []\n  widths      = {}\n  keys        = new Set()\n  key_widths  = {}\n  count       = 0\n  send        = null\n  #.........................................................................................................\n  flush = =>\n    return null unless cache?\n    send line for line from @walk_table_header keys, widths\n    for cached_row in cache\n      send line for line from @walk_formatted_table_row cached_row, keys, widths\n    cache = null\n  #.........................................................................................................\n  return PS.$ { last, }, ( row, send_ ) =>\n    send = send_\n    #.......................................................................................................\n    if row is last\n      flush()\n      send line for line from @walk_table_footer count\n      return null\n    #.......................................................................................................\n    count++\n    #.......................................................................................................\n    if count > limit\n      flush()\n      row[ key ] = @to_text row[ key ] for key from keys.values()\n      send line for line from @walk_formatted_table_row row, keys, widths\n      return null\n    #.......................................................................................................\n    d = {}\n    for key of row\n      keys.add key\n      d[ key ]      = value = @to_text row[ key ]\n      key_width     = ( key_widths[ key ] ?= width_of key )\n      widths[ key ] = Math.max 2, ( widths[ key ] ? 2 ), ( width_of value ), key_width\n    cache.push d\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee_as_table = ( settings, handler ) ->\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push @$collect_etc()\n  pipeline.push @$page_output arguments...\n  pipeline.push PS.$drain()\n  #.........................................................................................................\n  return PS.$tee PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$page_output = ( settings, handler ) ->\n  switch arity = arguments.length\n    when 0 then null\n    when 1\n      if isa.function settings\n        [ settings, handler, ] = [ null, settings, ]\n    when 2 then null\n    else throw new Error \"Âµ33981 expected between 0 and 2 arguments, got #{arity}\"\n  validate.function handler   if handler?\n  validate.object   settings  if settings?\n  #.........................................................................................................\n  defaults    =\n    pager:  path_to_pspg\n    args:   [  '-s17', '--force-uniborder', ]\n  #.........................................................................................................\n  settings    = if settings? then assign {}, defaults, settings else defaults\n  source      = PS.new_push_source()\n  stream      = PS.node_stream_from_source PS.pull source\n  stream.pipe new_pager settings, handler\n  last        = Symbol 'last'\n  #.........................................................................................................\n  return PS.$watch { last, }, ( line ) ->\n    return source.end() if line is last\n    line  = '' unless line?\n    line  = line.toString() unless isa.text line\n    line += '\\n'            unless isa.line line\n    source.send line\n    return null\n\n"
  ]
}