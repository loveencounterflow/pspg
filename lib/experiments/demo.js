// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, CND, PATH, PS, abspath, badge, debug, declare, echo, help, info, isa, join_paths, new_pager, path_1, path_to_pspg, pull_stream_to_stream, rpr, select, size_of, to_width, type_of, types, urge, validate, warn, whisper, width_of;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PSPG/EXPERIMENTS/DEMO';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  // FS                        = require 'fs'
  PATH = require('path');

  PS = require('pipestreams');

  ({$, $async, select} = PS);

  types = require('../types');

  ({isa, validate, declare, size_of, type_of} = types);

  //...........................................................................................................
  require('../exception-handler');

  //...........................................................................................................
  join_paths = function(...P) {
    return PATH.resolve(PATH.join(...P));
  };

  abspath = function(...P) {
    return join_paths(__dirname, ...P);
  };

  ({to_width, width_of} = require('to-width'));

  pull_stream_to_stream = require('pull-stream-to-stream');

  new_pager = require('default-pager');

  path_to_pspg = abspath('../../pspg');

  '/usr/share/dict/words';

  path_1 = abspath('../../src/experiments/test-data-1.tsv');

  //-----------------------------------------------------------------------------------------------------------
  this.walk_table_rows = function*(rows, keys, widths) {
    var i, key, len, row;
    yield ' ' + (((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        results.push(to_width(key, widths[key]));
      }
      return results;
    })()).join(' | ')) + ' ';
    yield '-' + (((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        results.push(to_width('', widths[key], {
          padder: '-'
        }));
      }
      return results;
    })()).join('-+-')) + '-';
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      yield ' ' + (((function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = keys.length; j < len1; j++) {
          key = keys[j];
          results.push(to_width(row[key], widths[key]));
        }
        return results;
      })()).join(' | ')) + ' ';
    }
    yield `(${rows.length} rows)`;
    yield '\n\n';
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$collect_etc = function() {
    var collector, keys, last, widths;
    last = Symbol('last');
    collector = [];
    widths = {};
    keys = null;
    //.........................................................................................................
    return PS.$({last}, (row, send) => {
      var d, key, line, ref, ref1, value, width;
      if (row === last) {
        ref = this.walk_table_rows(collector, keys, widths);
        for (line of ref) {
          // console.table collector
          send(line);
        }
      } else {
        if (keys == null) {
          keys = (function() {
            var results;
            results = [];
            for (key in row) {
              results.push(key);
            }
            return results;
          })();
        }
        d = {};
        for (key in row) {
          d[key] = value = row[key].toString();
          width = width_of(value);
          widths[key] = Math.max((ref1 = widths[key]) != null ? ref1 : 0, width);
        }
        collector.push(d);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$tee_as_table = () => {
    var pipeline;
    //.........................................................................................................
    pipeline = [];
    pipeline.push(this.$collect_etc());
    pipeline.push(this.$page_output());
    pipeline.push(PS.$drain());
    //.........................................................................................................
    return PS.$tee(PS.pull(...pipeline));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$page_output = function(settings = null) {
    var defaults, last, source, stream;
    defaults = {
      pager: path_to_pspg,
      args: ['-s17', '--force-uniborder']
    };
    //.........................................................................................................
    settings = settings != null ? assign({}, defaults, settings) : defaults;
    source = PS.new_push_source();
    stream = pull_stream_to_stream.source(PS.pull(source));
    stream.pipe(new_pager(settings, function() {
      return urge('ok');
    }));
    last = Symbol('last');
    //.........................................................................................................
    return PS.$watch({last}, function(line) {
      if (line === last) {
        return source.end();
      }
      if (!isa.text(line)) {
        line = line.toString();
      }
      if (!isa.line(line)) {
        line += '\n';
      }
      source.send(line);
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.demo = function() {
    var pipeline, source;
    source = PS.read_from_file(path_1);
    pipeline = [];
    pipeline.push(source);
    pipeline.push(PS.$split_tsv());
    pipeline.push(PS.$name_fields('fncr', 'glyph', 'formula'));
    pipeline.push(this.$add_random_words(10));
    pipeline.push(this.$add_ncrs());
    pipeline.push(this.$add_numbers());
    pipeline.push(this.$reorder_fields());
    pipeline.push(this.$tee_as_table());
    // pipeline.push @$page_output()
    pipeline.push(PS.$show());
    pipeline.push(PS.$drain());
    return PS.pull(...pipeline);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$reorder_fields = function() {
    return $((row, send) => {
      var bs, fncr, formula, formula_ncr, glyph, glyph_ncr, nr, nr2, nr3;
      ({nr, fncr, nr2, glyph, glyph_ncr, nr3, formula, formula_ncr, bs} = row);
      return send({nr, fncr, nr2, glyph, glyph_ncr, nr3, formula, formula_ncr, bs});
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$add_ncrs = function() {
    return $((row, send) => {
      row.glyph_ncr = to_width(this.text_as_ncrs(row.glyph), 20);
      row.formula_ncr = to_width(this.text_as_ncrs(row.formula), 20);
      return send(row);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$add_numbers = function() {
    var nr;
    nr = 0;
    return $((row, send) => {
      nr += +1;
      row.nr = nr;
      row.nr2 = nr ** 2;
      row.nr3 = nr ** 3;
      return send(row);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.text_as_ncrs = function(text) {
    var R, chr, cid_hex, i, len, ref;
    R = [];
    ref = Array.from(text);
    for (i = 0, len = ref.length; i < len; i++) {
      chr = ref[i];
      cid_hex = (chr.codePointAt(0)).toString(16);
      R.push(`&#x${cid_hex};`);
    }
    return R.join('');
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$add_random_words = function(n = 1) {
    var CP, count, word, words;
    validate.count(n);
    CP = require('child_process');
    count = Math.min(1e5, n * 1000);
    words = ((CP.execSync(`shuf -n ${count} /usr/share/dict/words`)).toString('utf-8')).split('\n');
    words = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = words.length; i < len; i++) {
        word = words[i];
        results.push(word.replace(/'s$/g, ''));
      }
      return results;
    })();
    words = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = words.length; i < len; i++) {
        word = words[i];
        if (word !== '') {
          results.push(word);
        }
      }
      return results;
    })();
    return $((fields, send) => {
      var _;
      fields.bs = ((function() {
        var i, ref, results;
        results = [];
        for (_ = i = 0, ref = n; (0 <= ref ? i <= ref : i >= ref); _ = 0 <= ref ? ++i : --i) {
          results.push(words[CND.random_integer(0, count)]);
        }
        return results;
      })()).join(' ');
      return send(fields);
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    (() => {
      return this.demo();
    })();
  }

}).call(this);

//# sourceMappingURL=demo.js.map
