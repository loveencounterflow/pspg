{
  "version": 3,
  "file": "demo.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PSPG/EXPERIMENTS/DEMO'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# FS                        = require 'fs'\nPATH                      = require 'path'\nPS                        = require 'pipestreams'\n{ $\n  $async\n  select }                = PS\ntypes                     = require '../types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\nrequire                   '../exception-handler'\njoin_paths                = ( P... ) -> PATH.resolve PATH.join P...\nabspath                   = ( P... ) -> join_paths __dirname, P...\n{ to_width, width_of, }   = require 'to-width'\nPSPG                      = require '../..'\npath_1                    = abspath '../../src/experiments/test-data-1.tsv'\njr                        = JSON.stringify\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_tabular_output = ->\n  return new Promise ( resolve ) =>\n    source    = PS.read_from_file path_1\n    pipeline  = []\n    pipeline.push source\n    pipeline.push PS.$split_tsv()\n    pipeline.push PS.$name_fields 'fncr', 'glyph', 'formula'\n    pipeline.push @$add_random_words 10\n    pipeline.push @$add_ncrs()\n    pipeline.push @$add_numbers()\n    pipeline.push @$add_nulls()\n    pipeline.push @$reorder_fields()\n    pipeline.push PSPG.$tee_as_table -> resolve()\n    pipeline.push PS.$drain()\n    PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_many_rows = ->\n  return new Promise ( resolve ) =>\n    source    = PS.new_value_source @get_random_words 1e4\n    pipeline  = []\n    pipeline.push source\n    pipeline.push $ ( word, send ) -> send \"#{word} \".repeat CND.random_integer 1, 20\n    pipeline.push $ ( text, send ) -> send { text, }\n    pipeline.push PSPG.$tee_as_table -> resolve()\n    pipeline.push PS.$drain()\n    PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_tabular_output_with_different_shapes = ->\n  ### This is to demonstrate that when objects with different shapes—i.e. different sets of properties—are\n  tabulated, the columns displayed represent the union of all keys of all objects. ###\n  return new Promise ( resolve ) =>\n    source    = PS.read_from_file path_1\n    pipeline  = []\n    pipeline.push source\n    pipeline.push PS.$split_tsv()\n    pipeline.push PS.$name_fields 'fncr', 'glyph', 'formula'\n    pipeline.push @$add_random_words 10\n    pipeline.push @$add_ncrs()\n    pipeline.push @$add_numbers()\n    pipeline.push @$reorder_fields()\n    pipeline.push @$drop_keys()\n    pipeline.push PSPG.$tee_as_table -> resolve()\n    pipeline.push PS.$drain()\n    PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_paged_output = ->\n  return new Promise ( resolve ) =>\n    source    = PS.read_from_file path_1\n    pipeline  = []\n    pipeline.push source\n    pipeline.push PS.$split_tsv()\n    pipeline.push PS.$name_fields 'fncr', 'glyph', 'formula'\n    pipeline.push @$add_random_words 10\n    pipeline.push @$add_ncrs()\n    pipeline.push @$add_numbers()\n    pipeline.push @$reorder_fields()\n    pipeline.push @$as_line()\n    pipeline.push PSPG.$page_output -> resolve()\n    pipeline.push PS.$drain()\n    PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$reorder_fields = -> $ ( row, send ) =>\n  { nr\n    fncr\n    nr2\n    glyph\n    glyph_ncr\n    nr3\n    formula\n    formula_ncr\n    bs }        = row\n  send { nr, fncr, nr2, glyph, glyph_ncr, nr3, formula, formula_ncr, bs, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_ncrs = ->\n  return $ ( row, send ) =>\n    row.glyph_ncr   = to_width ( @text_as_ncrs row.glyph    ), 20\n    row.formula_ncr = to_width ( @text_as_ncrs row.formula  ), 20\n    send row\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_numbers = ->\n  nr = 0\n  return $ ( row, send ) =>\n    nr             += +1\n    row.nr          = nr\n    row.nr2         = nr ** 2\n    row.nr3         = nr ** 3\n    send row\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_nulls = ->\n  return $ ( row, send ) =>\n    switch row.nr\n      when 3 then delete row.glyph\n      when 4 then row.bs = null\n    send row\n\n#-----------------------------------------------------------------------------------------------------------\n@$drop_keys = ->\n  return $ ( row, send ) =>\n    keys  = ( key for key of row )\n    idx   = row.nr %% keys.length\n    key   = keys[ idx ]\n    send { \"#{key}\": row[ key ], }\n    # send row\n\n#-----------------------------------------------------------------------------------------------------------\n@text_as_ncrs = ( text ) ->\n  R = []\n  for chr in Array.from text\n    cid_hex = ( chr.codePointAt 0 ).toString 16\n    R.push \"&#x#{cid_hex};\"\n  return R.join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_random_words = ( n = 1 ) ->\n  validate.count n\n  CP    = require 'child_process'\n  count = Math.min 1e5, n * 1000\n  words = ( ( CP.execSync \"shuf -n #{count} /usr/share/dict/words\" ).toString 'utf-8' ).split '\\n'\n  words = ( word.replace /'s$/g, '' for word in words )\n  words = ( word for word in words when word isnt '' )\n  return $ ( fields, send ) =>\n    fields.bs = ( words[ CND.random_integer 0, count ] for _ in [ 0 .. n ] ).join ' '\n    send fields\n\n#-----------------------------------------------------------------------------------------------------------\n@get_random_words = ( n = 10 ) ->\n  validate.count n\n  CP    = require 'child_process'\n  words = ( ( CP.execSync \"shuf -n #{n} /usr/share/dict/words\" ).toString 'utf-8' ).split '\\n'\n  words = ( word.replace /'s$/g, '' for word in words )\n  words = ( word for word in words when word isnt '' )\n  return words\n  # return $ ( fields, send ) =>\n  #   fields.bs = ( words[ CND.random_integer 0, count ] for _ in [ 0 .. n ] ).join ' '\n  #   send fields\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_line = -> $ ( d, send ) =>\n    d  = jr d unless isa.text d\n    d += '\\n' unless isa.line d\n    send d\n\n\n############################################################################################################\nunless module.parent?\n  do =>\n    await @demo_many_rows()\n    # await @demo_tabular_output()\n    # await @demo_tabular_output_with_different_shapes()\n    # await @demo_paged_output()\n\n\n"
  ]
}