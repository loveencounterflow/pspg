// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, CND, PATH, PS, _new_pager, abspath, badge, debug, echo, help, info, join_paths, pager_settings, pull_stream_to_stream, rpr, select, to_width, urge, warn, whisper, width_of;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PSPG/EXPERIMENTS/DEMO';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  // FS                        = require 'fs'
  PATH = require('path');

  PS = require('pipestreams');

  ({$, $async, select} = PS);

  // types                     = require '../types'
  // { isa
  //   validate
  //   declare
  //   size_of
  //   type_of }               = types
  // #...........................................................................................................
  // require                   '../exception-handler'
  //...........................................................................................................
  join_paths = function(...P) {
    return PATH.resolve(PATH.join(...P));
  };

  abspath = function(...P) {
    return join_paths(__dirname, ...P);
  };

  ({to_width, width_of} = require('to-width'));

  pull_stream_to_stream = require('pull-stream-to-stream');

  _new_pager = require('default-pager');

  pager_settings = {
    pager: abspath('../../pspg'),
    args: ['-s17', '--force-uniborder']
  };

  //-----------------------------------------------------------------------------------------------------------
  this.print_table = (rows, keys, widths) => {
    var i, key, len, row;
    /* headings */
    echo(' ' + (((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        results.push(to_width(key, widths[key]));
      }
      return results;
    })()).join(' | ')) + ' ');
    /* divider */
    echo('-' + (((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        results.push(to_width('', widths[key], {
          padder: '-'
        }));
      }
      return results;
    })()).join('-+-')) + '-');
/* data */
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      echo(' ' + (((function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = keys.length; j < len1; j++) {
          key = keys[j];
          results.push(to_width(row[key], widths[key]));
        }
        return results;
      })()).join(' | ')) + ' ');
    }
    echo(`(${rows.length} rows)`);
    echo('\n\n');
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$tee_as_table = () => {
    var collect_etc, collector, keys, last, pipeline, widths;
    last = Symbol('last');
    collector = [];
    widths = {};
    keys = null;
    //.........................................................................................................
    collect_etc = PS.$watch({last}, (row) => {
      var key, ref, width;
      if (row === last) {
        // console.table collector
        this.print_table(collector, keys, widths);
      } else {
        if (keys == null) {
          keys = (function() {
            var results;
            results = [];
            for (key in row) {
              results.push(key);
            }
            return results;
          })();
        }
        collector.push(row);
        for (key in row) {
          width = width_of(row[key]);
          widths[key] = Math.max((ref = widths[key]) != null ? ref : 0, width);
        }
      }
      return null;
    });
    //.........................................................................................................
    pipeline = [];
    pipeline.push(collect_etc);
    pipeline.push(PS.$drain());
    //.........................................................................................................
    return PS.$tee(PS.pull(...pipeline));
  };

  this.new_pager(function() {
    var end_output, output, pipeline, source, stream;
    // stream    = FS.createReadStream PATH.join __dirname, '../../README.md'
    pipeline = [];
    source = PS.new_push_source();
    pipeline.push(source);
    stream = pull_stream_to_stream.source(PS.pull(...pipeline));
    stream.pipe(_new_pager(pager_settings, function() {
      return urge('ok');
    }));
    output = function(t) {
      return source.send(t + '\n');
    };
    return end_output = function() {
      return source.end();
    };
  });

}).call(this);

//# sourceMappingURL=main.js.map
